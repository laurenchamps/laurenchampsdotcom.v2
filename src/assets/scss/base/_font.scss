// | -------------------------------------------------------------
// | Font
// | -------------------------------------------------------------

@use 'breakpoint' as *;

@font-face {
  font-style: normal;
  font-weight: 400;
  src: url('/fonts/HedvigLettersSerif-Regular-VariableFont_opsz.woff2') format('woff2');
  font-family: 'Hedvig Letters Serif';
  font-display: swap;
}

@font-face {
  font-style: normal;
  font-weight: 400;
  src: url('/fonts/Satoshi-Regular.woff2') format('woff2');
  font-family: 'Satoshi';
  font-display: swap;
}

@font-face {
  font-style: italic;
  font-weight: 400;
  src: url('/fonts/Satoshi-Italic.woff2') format('woff2');
  font-family: 'Satoshi';
  font-display: swap;
}

@font-face {
  font-style: normal;
  font-weight: 500;
  src: url('/fonts/Satoshi-Medium.woff2') format('woff2');
  font-family: 'Satoshi';
  font-display: swap;
}

@font-face {
  font-style: italic;
  font-weight: 500;
  src: url('/fonts/Satoshi-MediumItalic.woff2') format('woff2');
  font-family: 'Satoshi';
  font-display: swap;
}

@font-face {
  font-style: normal;
  font-weight: 700;
  src: url('/fonts/Satoshi-Bold.woff2') format('woff2');
  font-family: 'Satoshi';
  font-display: swap;
}

@font-face {
  font-style: normal;
  font-weight: 900;
  src: url('/fonts/Satoshi-Black.woff2') format('woff2');
  font-family: 'Satoshi';
  font-display: swap;
}

@font-face {
  font-style: normal;
  font-weight: bold;
  src:
    local('Open Sans ExtraBold'),
    local('OpenSans-ExtraBold'),
    url('/fonts/OpenSans-ExtraBold.woff2') format('woff2'),
    url('/fonts/OpenSans-ExtraBold.woff') format('woff');
  font-family: 'Open Sans';
  font-display: swap;
}

@font-face {
  font-style: normal;
  font-weight: bold;
  src:
    local('Open Sans Bold'),
    local('OpenSans-Bold'),
    url('/fonts/OpenSans-Bold.woff2') format('woff2'),
    url('/fonts/OpenSans-Bold.woff') format('woff');
  font-family: 'Open Sans';
  font-display: swap;
}

@font-face {
  font-style: italic;
  font-weight: normal;
  src:
    local('Open Sans Italic'),
    local('OpenSans-Italic'),
    url('/fonts/OpenSans-Italic.woff2') format('woff2'),
    url('/fonts/OpenSans-Italic.woff') format('woff');
  font-family: 'Open Sans';
  font-display: swap;
}

@font-face {
  font-style: normal;
  font-weight: normal;
  src:
    local('Open Sans Regular'),
    local('OpenSans-Regular'),
    url('/fonts/OpenSans-Regular.woff2') format('woff2'),
    url('/fonts/OpenSans-Regular.woff') format('woff');
  font-family: 'Open Sans';
  font-display: swap;
}

body {
  margin: 0;
  font-size: var(--size-step-0);
  line-height: var(--leading-standard);
  font-family: var(--font-family-default);
  font-size-adjust: from-font;
  font-synthesis: none;
  text-rendering: optimizeLegibility;
  text-shadow: rgba(0, 0, 0, 0.01) 0 0 1px;
  -webkit-text-size-adjust: 100%;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

:is(h1, h2, h3) {
  line-height: var(--leading-fine);
  text-wrap: balance;
}

h1 {
  max-width: 20ch;
  font-weight: 700;
  font-size: var(--size-step-6);
}

h2 {
  max-width: 35ch;
  font-weight: 600;
  font-size: var(--size-step-5);
}

h3 {
  max-width: 35ch;
  font-size: var(--size-step-3);
}

:is(h4, h5, h6) {
  font-size: var(--size-step-3);
}

p {
  max-width: 60ch;
}

small {
  font-size: var(--size-step-0);
}

ins {
  background: var(--color-primary);
  padding-inline: 0.3em;
  color: var(--color-dark);
  text-decoration: none;
}

:is(code, kbd, samp) {
  padding: 0.2em 0.2em 0.05em 0.2em;
  font-family: var(--font-mono);
  hyphens: none;
  text-align: left;
  word-break: normal;
  word-spacing: normal;
  tab-size: 2;
  word-wrap: normal;
  box-decoration-break: clone;
}

@supports not (font-size-adjust: from-font) {
  :is(code, kbd, samp) {
    font-size: 0.8em;
  }
}

pre:has(code) {
  width: max-content;
  max-width: 100%;
  overflow-x: auto;
}

pre code {
  border: none;
  background: none;
  padding: 0;
}

kbd {
  border: 1px solid;
  padding-block-end: 0.1em;
}

var {
  font-style: normal;
  font-weight: var(--font-medium);
}

q {
  font-style: italic;
}

table {
  border: var(--stroke);
  border-collapse: collapse;
  width: 100%;
}

th {
  font-weight: var(--font-bold);
  line-height: var(--leading-fine);
  text-align: left;
}

thead th {
  padding-block: var(--space-s);
}

td,
th {
  padding: var(--space-xs) var(--space-s);
}

th:not(:only-of-type) {
  border-block-end: var(--stroke);
}

th:only-of-type {
  border-inline-end: var(--stroke);
}

:is(th, td) ~ :is(th, td) {
  border-inline-start: var(--stroke);
}

tr + tr :is(th, td) {
  border-block-start: var(--stroke);
}

caption {
  margin-block-start: var(--space-s);
  caption-side: bottom;
}

a:not([class]):hover {
  text-underline-offset: 0.1lh;
}

a:not([class]) {
  text-decoration-color: var(--primary-300);
}

:is(h1, h2, h3, h4) a:not([class]) {
  text-decoration-thickness: 0.1ex;
  text-underline-offset: 0.2ex;
}

:is(h1, h2, h3, h4) a:not([class]):hover {
  text-underline-offset: 0.3ex;
}

:focus {
  outline: none;
}

:focus-visible {
  outline: 2px solid var(--focus-color, currentColor);
  outline-offset: var(--focus-offset, 0.2lh);
}

/* Firefox is the only browser that doesn't outline the whole element unless you make it display: inline-block. That in itself causes multiple flow issues so we can detect it, using its own vendor prefix and reduce focus offset
*/
@supports (-moz-appearance: none) {
  :root {
    --focus-offset: 0.08em;
  }
}

:target {
  scroll-margin-block: 2lh;
}

::selection {
  background: var(--color-dark);
  color: var(--color-light);
}

hr {
  margin-block: var(--flow-space, var(--space-xl));
  border: none;
  border-block-start: var(--hr-stroke, var(--stroke));
}

// svg:not([class]) {
//   width: auto;
//   height: 1lh;
// }

// svg {
//   flex-shrink: 0;
// }

// svg[role='img'][width][height] {
//   background: var(--color-dark);
//   padding: var(--space-xs);
//   width: revert;
//   height: revert;
// }

/* There's a .flow composition, but this prevents forms from having to have that applied where markup is harder to control in certain systems. It still uses the --flow-space variables though to make managing space easier */
form > * + * {
  margin-top: var(--flow-space, 1rem);
}

:is(input, select, textarea) {
  accent-color: var(--color-primary);
}

:is(input:not([type='checkbox'], [type='radio'], [type='color']), select, textarea) {
  border: var(--stroke-solid);
  border-radius: var(--radius-s);
  background: var(--color-dark-glare);
  padding: 0.5em 0.8em;
  width: 100%;
  color: var(--color-light);

  &::placeholder {
    opacity: 1;
    color: var(--color-mid);
  }
}

label {
  font-weight: var(--font-medium);
  line-height: var(--leading-fine);
}

label::after {
  content: '\A';
  white-space: pre;
}

/* Usually label wraps checkbox and radio buttons, so we give ourselves more layout and text-flow control with flex */
label:has(input) {
  display: flex;
  align-items: baseline;
  gap: var(--space-s);
  font-weight: var(--font-normal);
}

label:has(input) + label:has(input) {
  --flow-space: var(--space-s-m);
}

/* Slightly adjusts the vertical position of the check/radio */
label:has(input) input {
  transform: translateY(-0.1ex);
}

input:disabled {
  background: var(--color-mid);
}

input:disabled,
label input:disabled + * {
  cursor: not-allowed;
}

fieldset {
  border: var(--stroke);
  padding: var(--space-s);
}

legend {
  padding-inline: var(--space-xs);
  font-weight: var(--font-medium);
}

summary {
  cursor: pointer;
  font-weight: var(--font-bold);
}

details[open] summary {
  margin-block-end: var(--space-s);
}

.btngrp {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  gap: var(--space-s) var(--space-m);
  padding-block-end: var(--space-s);
}

// a:not(.button) {
//   color: currentColor;
//   text-decoration: underline;
//   text-decoration-color: var(--action-color);

//   // &:visited {
//   //   color: var(--action-color);
//   // }

//   &:hover,
//   &:focus {
//     text-underline-offset: 0.1lh;
//   }
// }
