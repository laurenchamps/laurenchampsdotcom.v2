// | -------------------------------------------------------------
// | Root
// | -------------------------------------------------------------

@use 'color' as *;

:root {
  color-scheme: light dark;
  interpolate-size: allow-keywords;

  @each $color, $shades in $colors {
    @each $shade, $value in $shades {
      --#{$color}-#{$shade}: #{$value};
    }
  }

  /* VARIABLES */
  --gutter: var(--space-m-l);
  --transition-base: 250ms ease;
  --transition-movement: 200ms linear;
  --transition-fade: 300ms ease;
  --transition-bounce: 500ms cubic-bezier(0.5, 0.05, 0.2, 1.5);
  --stroke-width: 1px;
  --stroke: var(--stroke-width) dashed var(--color-dark);
  --stroke-solid: (--stroke-width) solid var(--color-dark);
  --radius-s: 0.2rem;
  --radius-m: 0.75rem;
  --radius-l: 2.5rem;
  --uppercase-tracking: 0.04ch;
  --wrapper-max-width: 1360px;
  --bg-grey: var(--grey-300);
  --ribbon-color: var(--dark-green-100);

  /* Sizing and spacing */
  /* FLUID TYPE SCALE */

  /* @link https://utopia.fyi/type/calculator?c=320,18,1.2,1240,20,1.25,6,2,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l&g=s,l,xl,12 */
  --size-step--2: clamp(0.7813rem, 0.7747rem + 0.0326vw, 0.8rem);
  --size-step--1: clamp(0.9375rem, 0.9158rem + 0.1087vw, 1rem);
  --size-step-0: clamp(1.125rem, 1.0815rem + 0.2174vw, 1.25rem);
  --size-step-1: clamp(1.35rem, 1.2761rem + 0.3696vw, 1.5625rem);
  --size-step-2: clamp(1.62rem, 1.5041rem + 0.5793vw, 1.9531rem);
  --size-step-3: clamp(1.944rem, 1.771rem + 0.8651vw, 2.4414rem);
  --size-step-4: clamp(2.3328rem, 2.0827rem + 1.2504vw, 3.0518rem);
  --size-step-5: clamp(2.7994rem, 2.4462rem + 1.7658vw, 3.8147rem);
  --size-step-6: clamp(3.3592rem, 2.8691rem + 2.4507vw, 4.7684rem);

  /* Leading text (ratio-based leading/line-height values) */
  --leading-micro: 0.85;
  --leading-flat: 1;
  --leading-fine: 1.2;
  --leading-standard: 1.4;
  --leading-loose: 1.7;

  /* Text weights */
  --font-regular: 400;
  --font-medium: 500;
  --font-bold: 700;
  --font-black: 900;

  /* Viewports */
  --viewport-min: 300px;
  --viewport-mid: 760px;
  --viewport-large: 940px;
  --viewport-max: 1350px;

  /* FLUID SPACING */
  /* @link https://utopia.fyi/space/calculator?c=320,18,1.2,1240,20,1.25,6,2,&s=0.75|0.5|0.25,1.5|2|3|4|6|6,s-l&g=s,l,xl,12 */

  --space-3xs: clamp(0.3125rem, 0.3125rem + 0vw, 0.3125rem);
  --space-2xs: clamp(0.5625rem, 0.5408rem + 0.1087vw, 0.625rem);
  --space-xs: clamp(0.875rem, 0.8533rem + 0.1087vw, 0.9375rem);
  --space-s: clamp(1.125rem, 1.0815rem + 0.2174vw, 1.25rem);
  --space-m: clamp(1.6875rem, 1.6223rem + 0.3261vw, 1.875rem);
  --space-l: clamp(2.25rem, 2.163rem + 0.4348vw, 2.5rem);
  --space-xl: clamp(3.375rem, 3.2446rem + 0.6522vw, 3.75rem);
  --space-2xl: clamp(4.5rem, 4.3261rem + 0.8696vw, 5rem);
  --space-3xl: clamp(6.75rem, 6.4891rem + 1.3043vw, 7.5rem);
  --space-4xl: clamp(6.75rem, 6.4891rem + 1.3043vw, 7.5rem);

  /* One-up pairs */
  --space-3xs-2xs: clamp(0.3125rem, 0.2038rem + 0.5435vw, 0.625rem);
  --space-2xs-xs: clamp(0.5625rem, 0.4321rem + 0.6522vw, 0.9375rem);
  --space-xs-s: clamp(0.875rem, 0.7446rem + 0.6522vw, 1.25rem);
  --space-s-m: clamp(1.125rem, 0.8641rem + 1.3043vw, 1.875rem);
  --space-m-l: clamp(1.6875rem, 1.4049rem + 1.413vw, 2.5rem);
  --space-l-xl: clamp(2.25rem, 1.7283rem + 2.6087vw, 3.75rem);
  --space-xl-2xl: clamp(3.375rem, 2.8098rem + 2.8261vw, 5rem);
  --space-2xl-3xl: clamp(4.5rem, 3.4565rem + 5.2174vw, 7.5rem);
  --space-3xl-4xl: clamp(6.75rem, 6.4891rem + 1.3043vw, 7.5rem);

  /* Custom pairs */
  --space-s-l: clamp(1.125rem, 0.6467rem + 2.3913vw, 2.5rem);
}

/* COMPOSITIONS */

/* ~ CLUSTER ~
More info: https://every-layout.dev/layouts/cluster/
A layout that lets you distribute items with consitent
spacing, regardless of their size

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-m)): This defines the space
between each item.

--cluster-horizontal-alignment (flex-start): How items should align
horizontally. Can be any acceptable flexbox aligmnent value.

--cluster-vertical-alignment (center): How items should align vertically.
Can be any acceptable flexbox alignment value.
*/

.cluster {
  display: flex;
  flex-wrap: wrap;
  justify-content: var(--cluster-horizontal-alignment, flex-start);
  align-items: var(--cluster-vertical-alignment, center);
  gap: var(--gutter, var(--space-m));
}

/* ~ FLOW COMPOSITION ~
Like the Every Layout stack: https://every-layout.dev/layouts/stack/
Info about this implementation: https://piccalil.li/blog/my-favourite-3-lines-of-css/ 
*/

.flow > * + * {
  margin-block-start: var(--flow-space, 1em);
}

/* ~ AUTO GRID ~
Related Every Layout: https://every-layout.dev/layouts/grid/
More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
A flexible layout that will create an auto-fill grid with
configurable grid item sizes

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-m)): This defines the space
between each item.

--grid-min-item-size (14rem): How large each item should be
ideally, as a minimum.

--grid-placement (auto-fill): Set either auto-fit or auto-fill
to change how empty grid tracks are handled */

// .grid {
//   display: grid;
//   grid-template-columns: repeat(var(--grid-placement, auto-fill), minmax(var(--grid-min-item-size, 16rem), 1fr));
//   gap: var(--gutter, var(--space-s-l));
// }

// /* A split 50/50 layout */
// .grid[data-layout='50-50'] {
//   --grid-placement: auto-fit;
//   --grid-min-item-size: clamp(16rem, 40vw, 33rem);
// }

// /* Three column grid layout */
// .grid[data-layout='thirds'] {
//   --grid-placement: auto-fit;
//   --grid-min-item-size: clamp(16rem, 33%, 20rem);
// }

/* ~ REPEL ~
A little layout that pushes items away from each other where
there is space in the viewport and stacks on small viewports

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-m)): This defines the space
between each item.

--repel-vertical-alignment (center): How items should align vertically.
Can be any acceptable flexbox alignment value.
*/

.repel {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: var(--repel--vertical-alignment, center);
  gap: var(--gutter, var(--space-m));
}

.repel[data-nowrap] {
  flex-wrap: nowrap;
}

/* ~ SIDEBAR ~
More info: https://every-layout.dev/layouts/sidebar/
A layout that allows you to have a flexible main content area
and a "fixed" width sidebar that sits on the left or right.
If there is not enough viewport space to fit both the sidebar
width *and* the main content minimum width, they will stack
on top of each other

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between the sidebar and main content.

--sidebar-target-width (20rem): How large the sidebar should be

--sidebar-content-min-width(50%): The minimum size of the main content area

EXCEPTIONS
.sidebar[data-direction='rtl']: flips the sidebar to be on the right 
*/
.sidebar {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-s-l));
}

.sidebar:not([data-direction]) > :first-child {
  flex-grow: 1;
  flex-basis: var(--sidebar-target-width, 20rem);
}

.sidebar:not([data-direction]) > :last-child {
  flex-grow: 999;
  flex-basis: 0;
  min-width: var(--sidebar-content-min-width, 50%);
}

.sidebar[data-reversed] {
  flex-direction: row-reverse;
}

.sidebar[data-direction='rtl'] > :last-child {
  flex-grow: 1;
  flex-basis: var(--sidebar-target-width, 20rem);
}

.sidebar[data-direction='rtl'] > :first-child {
  flex-grow: 999;
  flex-basis: 0;
  min-width: var(--sidebar-content-min-width, 50%);
}

/* ~ SWITCHER ~
More info: https://every-layout.dev/layouts/switcher/
A layout that allows you to lay **2** items next to each other
until there is not enough horizontal space to allow that.

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between each item

--switcher-target-container-width (40rem): How large the container
needs to be to allow items to sit inline with each other

--switcher-vertical-alignment (flex-start): How items should align vertically.
Can be any acceptable flexbox alignment value.
*/
.switcher {
  display: flex;
  flex-wrap: wrap;
  align-items: var(--switcher-vertical-alignment, flex-start);
  gap: var(--gutter, var(--space-l));
}

.switcher > * {
  flex-grow: 1;
  flex-basis: calc((var(--switcher-target-container-width, 40rem) - 100%) * 999);
}

/* Max 2 items,
so anything greater than 2 is full width */
.switcher > :nth-child(n + 3) {
  flex-basis: 100%;
}

/* ~ WRAPPER COMPOSITION ~
A common wrapper/container
*/
.wrapper-pcli {
  position: relative;
  margin-inline: auto;
  padding-inline: var(--gutter);
  max-width: var(--wrapper-max-width, 1360px);
}
